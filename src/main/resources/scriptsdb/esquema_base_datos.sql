CREATE DATABASE "SENADO_SED"
WITH
OWNER = postgres
ENCODING = 'UTF8'
LC_COLLATE = 'Spanish_Latin America.1252'
LC_CTYPE = 'Spanish_Latin America.1252'
TABLESPACE = pg_default
CONNECTION LIMIT = -1;

COMMENT ON DATABASE "SENADO_SED"
IS 'Base de datos central para el Modulo Informatico del Sistema de Evaluacion del Desempenio.';

CREATE TABLE PROGRAMA_INSTITUCIONAL(
	ID_PROGRAMA_INSTITUCIONAL BIGSERIAL PRIMARY KEY,
	CLAVE VARCHAR(100),
	NOMBRE VARCHAR(250),
	DESCRIPCION VARCHAR(1200)
);


CREATE TABLE ORGANO_DIRECCION_ESTRATEGICA(
	ID_ORGANO_DIRECCION_ESTRATEGICA BIGSERIAL PRIMARY KEY,
	ID_PROGRAMA_INSTITUCIONAL BIGINT REFERENCES PROGRAMA_INSTITUCIONAL(ID_PROGRAMA_INSTITUCIONAL) ON DELETE CASCADE ON UPDATE CASCADE,
	NOMBRE VARCHAR(250),
	DESCRIPCION VARCHAR(1200)
);



CREATE TABLE UNIDAD_APOYO(
	ID_UNIDAD_APOYO BIGSERIAL PRIMARY KEY,
	ID_ORGANO_DIRECCION_ESTRATEGICA BIGINT REFERENCES ORGANO_DIRECCION_ESTRATEGICA(ID_ORGANO_DIRECCION_ESTRATEGICA) ON DELETE CASCADE ON UPDATE CASCADE,
	NOMBRE VARCHAR(250),
	PROPOSITO VARCHAR(1200)
);


CREATE TABLE USUARIO(
	ID_USUARIO BIGSERIAL PRIMARY KEY,
	ID_UNIDAD_APOYO BIGINT REFERENCES UNIDAD_APOYO(ID_UNIDAD_APOYO) ON DELETE CASCADE ON UPDATE CASCADE,
	IDENTIDAD VARCHAR(18),
	CLAVE_ACCESO VARCHAR(100),
	NOMBRE VARCHAR(50),
	APELLIDO_PATERNO VARCHAR(50),
	APELLIDO_MATERNO VARCHAR(50),
	PUESTO_LABORAL VARCHAR(120),
	CORREO_ELECTRONICO VARCHAR(250),
	EXTENSION_TELEFONICA VARCHAR(16),
	ROL_DESIGNADO VARCHAR(30),
	TIPO_USUARIO VARCHAR(30),
	FECHA_REGISTRO VARCHAR(100),
	HORA_REGISTRO VARCHAR (20),
	PUEDE_CONSULTAR BOOLEAN,
	PUEDE_ACTUALIZAR BOOLEAN,
	PUEDE_AGREGAR BOOLEAN,
	PUEDE_BORRAR BOOLEAN,
	PUEDE_AUTENTICARSE BOOLEAN
);

CREATE TABLE MODULO(
	ID_MODULO BIGSERIAL PRIMARY KEY,
	NOMBRE_MODULO VARCHAR(500),
	DESCRIPCION VARCHAR(1000),
	FECHA_REGISTRO VARCHAR(100),
	HORA_REGISTRO VARCHAR(20)
);

CREATE TABLE USUARIO_MODULO(
	ID_USUARIO_MODULO BIGSERIAL PRIMARY KEY,
	ID_USUARIO BIGINT REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE,
	ID_MODULO BIGINT REFERENCES MODULO(ID_MODULO) ON DELETE CASCADE ON UPDATE CASCADE,
	PUEDE_ACCEDER BOOLEAN
);

CREATE TABLE ACTIVIDAD_EXTEMPORANEA(
	ID_ACTIVIDAD_EXTEMPORANEA BIGSERIAL PRIMARY KEY,
	ID_USUARIO BIGINT REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE,
	TIPO_ACTIVIDAD_EXTEMPORANEA VARCHAR(100),
	SOLICITUD_FECHA_INICIO VARCHAR(100),
	SOLICITUD_FECHA_TERMINO VARCHAR(100),
	SOLICITUD_HORA_INICIO VARCHAR(14),
	SOLICITUD_HORA_TERMINO VARCHAR(14),
	SOLICITANTE VARCHAR(300),
	ID_UNIDAD_APOYO_SOLICITANTE BIGINT REFERENCES UNIDAD_APOYO(ID_UNIDAD_APOYO) ON DELETE CASCADE ON UPDATE CASCADE,
	RUTA_DOCUMENTO_SOLICITUD VARCHAR(1000),
	INTERRUPTOR VARCHAR(80),
	ACTIVA BOOLEAN,
	FECHA_REGISTRO VARCHAR(100),
	HORA_REGISTRO VARCHAR(14)
);




-- DROP FUNCTION CONTAR_USUARIOS_POR_UNIDAD_APOYO(BIGINT);
CREATE OR REPLACE FUNCTION CONTAR_USUARIOS_POR_UNIDAD_APOYO(IN ID_UA BIGINT)
	RETURNS BIGINT AS $total_conteo_por_unidad_apoyo$
DECLARE
	total_conteo_por_unidad_apoyo BIGINT;
BEGIN
	SELECT COUNT(ID_USUARIO) INTO total_conteo_por_unidad_apoyo FROM USUARIO WHERE ID_UNIDAD_APOYO = ID_UA;
	RETURN total_conteo_por_unidad_apoyo;
END;
$total_conteo_por_unidad_apoyo$ LANGUAGE plpgsql;


-- DROP FUNCTION CONTAR_USUARIOS_POR_ORGANO_DIRECCION_ESTRATEGICA(BIGINT);
CREATE OR REPLACE FUNCTION CONTAR_USUARIOS_POR_ORGANO_DIRECCION_ESTRATEGICA(IN ID_ODE BIGINT)
	RETURNS BIGINT AS $total_conteo_por_organo_direccion_estrategica$
DECLARE
	total_conteo_por_organo_direccion_estrategica BIGINT;
BEGIN
	SELECT COUNT(U.ID_USUARIO) INTO total_conteo_por_organo_direccion_estrategica FROM USUARIO U
		INNER JOIN UNIDAD_APOYO UA ON U.ID_UNIDAD_APOYO = UA.ID_UNIDAD_APOYO
		INNER JOIN ORGANO_DIRECCION_ESTRATEGICA ODE ON UA.ID_ORGANO_DIRECCION_ESTRATEGICA = ODE.ID_ORGANO_DIRECCION_ESTRATEGICA
	WHERE ODE.ID_ORGANO_DIRECCION_ESTRATEGICA = ID_ODE;
	RETURN total_conteo_por_organo_direccion_estrategica;
END;
$total_conteo_por_organo_direccion_estrategica$ LANGUAGE plpgsql;

-- DROP FUNCTION CONTAR_USUARIOS_POR_PROGRAMA_INSTITUCIONAL(BIGINT);
CREATE OR REPLACE FUNCTION CONTAR_USUARIOS_POR_PROGRAMA_INSTITUCIONAL(IN ID_PI BIGINT)
	RETURNS BIGINT AS $total_conteo_por_programa_institucional$
DECLARE
	total_conteo_por_programa_institucional BIGINT;
BEGIN
	SELECT COUNT(U.ID_USUARIO) INTO total_conteo_por_programa_institucional FROM USUARIO U
		INNER JOIN UNIDAD_APOYO UA
			ON U.ID_UNIDAD_APOYO = UA.ID_UNIDAD_APOYO
		INNER JOIN ORGANO_DIRECCION_ESTRATEGICA ODE
			ON UA.ID_ORGANO_DIRECCION_ESTRATEGICA = ODE.ID_ORGANO_DIRECCION_ESTRATEGICA
		INNER JOIN PROGRAMA_INSTITUCIONAL PI
			ON ODE.ID_PROGRAMA_INSTITUCIONAL = PI.ID_PROGRAMA_INSTITUCIONAL
	WHERE PI.ID_PROGRAMA_INSTITUCIONAL = ID_PI;
	RETURN total_conteo_por_programa_institucional;
END;
$total_conteo_por_programa_institucional$ LANGUAGE plpgsql;

CREATE VIEW CONTAR_USUARIOS AS SELECT COUNT(ID_USUARIO) AS TOTAL_CONTEO FROM USUARIO;
CREATE VIEW CONTAR_PROGRAMAS_INSTITUCIONALES AS SELECT COUNT(ID_PROGRAMA_INSTITUCIONAL) AS TOTAL_CONTEO FROM PROGRAMA_INSTITUCIONAL;
CREATE VIEW CONTAR_ORGANOS_DIRECCION_ESTRATEGICA AS SELECT COUNT(ID_ORGANO_DIRECCION_ESTRATEGICA) AS TOTAL_CONTEO FROM ORGANO_DIRECCION_ESTRATEGICA;
CREATE VIEW CONTAR_UNIDADES_APOYO AS SELECT COUNT(ID_UNIDAD_APOYO) AS TOTAL_CONTEO FROM UNIDAD_APOYO;